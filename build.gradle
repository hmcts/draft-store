buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.flywaydb:flyway-database-postgresql:11.11.1")
  }
}

plugins {
  id 'application'
  id 'jacoco'
  id 'pmd'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.flywaydb.flyway' version '11.11.1'
  id 'org.springframework.boot' version '3.5.4'
  id 'uk.gov.hmcts.java' version '0.12.67'
  id 'se.patrikerdes.use-latest-versions' version '0.2.19'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
  id 'scala'
  id 'io.gatling.gradle' version '3.10.2'
  id 'au.com.dius.pact' version '4.6.17'
}

group 'uk.gov.hmcts.reform'
version '1.1.0'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

dependencyManagement {
    dependencies {

        //CVE-2022-25857, CVE-2022-38749, CVE-2022-38750, CVE-2022-38751, CVE-2022-38752, CVE-2022-41854
        dependencySet(group: 'org.yaml', version: '2.4') {
            entry 'snakeyaml'
        }

        // CVE-2023-28709
        // CVE-2023-42794, CVE-2023-42795, CVE-2023-45648
        dependencySet(group: 'org.apache.tomcat.embed', version: '11.0.10') {
          entry 'tomcat-embed-core'
          entry 'tomcat-embed-el'
          entry 'tomcat-embed-websocket'
        }

        // CVE-2025-48924
        dependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.18.0'
    }
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


test {
  useJUnitPlatform()
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  useJUnitPlatform()
}

task contract(type: Test) {
  description = 'Runs the  Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/draftstore/**"
  systemProperty 'pact.rootDir', "pacts"
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

def sonarExclusions = [
  '**/uk/gov/hmcts/reform/draftstore/service/s2s/S2sClientStub.java',
]

project.tasks['sonarqube'].dependsOn jacocoTestReport
sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Draft Store"
    property "sonar.projectKey", "uk.gov.hmcts.reform:draft-store"
    property "sonar.exclusions", sonarExclusions.join(', ')
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
      return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
  mavenCentral()
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot

ext {
  pactVersion = '4.6.17'
  pactJava8Version = '4.1.43'
}

dependencies {
  implementation(
    "org.springframework.boot:spring-boot-starter-web",
    "org.springframework.boot:spring-boot-starter-actuator",
    "org.springframework.boot:spring-boot-starter-jdbc",
    "org.springframework.boot:spring-boot-starter-validation",
  )

  // TODO remove these next two lines after upgrading to spring boot >=3.2.1
  implementation("ch.qos.logback:logback-classic:1.5.18")
  implementation("ch.qos.logback:logback-core:1.5.18")

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.7'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '11.11.1'
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: '11.11.1'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.10'

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'

  implementation group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j'

  implementation 'com.github.hmcts:reform-api-standards:0.5.2'

  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine'
  testImplementation group: 'org.junit.platform', name: 'junit-platform-engine'
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
  testImplementation 'org.testcontainers:postgresql:1.21.3'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation sourceSets.smokeTest.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  gatlingImplementation 'org.scala-lang:scala-library:2.13.16'
  gatlingImplementation 'com.warrenstrange:googleauth:1.5.0'

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: pactVersion
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: pactJava8Version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: pactVersion
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: pactJava8Version

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: pactVersion
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
  contractTestImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine'
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-engine'
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons'

}

gatling {
  toolVersion '3.3.1'
  scalaVersion '2.12.10'
  simulations = { include "uk.gov.hmcts.reform.draftstore.CreateMultipleDrafts.scala" }
}

bootJar {
  archiveFileName = 'draft-store.jar'

  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task runProviderPactVerification(type: Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
  systemProperty 'pact.provider.version', System.getProperty('pact.provider.version')
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
tasks.withType(Copy).all {
    duplicatesStrategy 'exclude'
}

runProviderPactVerification.dependsOn contract

runProviderPactVerification.finalizedBy pactVerify
