plugins {
  id 'application'
  id 'jacoco'
  id 'pmd'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.flywaydb.flyway' version '8.4.0'
  id 'org.springframework.boot' version '2.5.6'
  id 'uk.gov.hmcts.java' version '0.12.16'
  id 'se.patrikerdes.use-latest-versions' version '0.2.18'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.3'
  id 'scala'
  id 'io.gatling.gradle' version '3.6.1'
  id 'au.com.dius.pact' version '4.3.0'
}

group 'uk.gov.hmcts.reform'
version '1.1.0'

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


test {
  useJUnitPlatform()
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  useJUnitPlatform()
}

task contract(type: Test) {
  description = 'Runs the  Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/draftstore/**"
  systemProperty 'pact.rootDir', "pacts"
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

pmd {
  toolVersion = "6.40.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration
sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Draft Store"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"

  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
      return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  maven {
    url "https://jitpack.io"
  }
  mavenCentral()
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit: '5.7.1',
  junitPlatform: '1.7.1',
  logging: '5.1.7',
  springBoot: springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2',
  pact_version: '4.3.0',
  pactVersionJava8: '4.1.29'
]

ext["rest-assured.version"] = '4.3.0'

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['org.scala-lang']) {
        details.useVersion '2.12.10'
      }
      if (details.requested.group in ['org.apache.tomcat.embed']) {
        details.useVersion '9.0.54'
      }
    }
  }
}

ext {
  log4JVersion = "2.15.0"
}

dependencies {
  implementation(
    "org.springframework.boot:spring-boot-starter-web",
    "org.springframework.boot:spring-boot-starter-actuator",
    "org.springframework.boot:spring-boot-starter-jdbc",
    "org.springframework.boot:spring-boot-starter-validation",
  )
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.1'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.0.4'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'

  implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.logging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-spring', version: versions.logging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.logging

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation 'com.github.hmcts:reform-api-standards:0.5.2'

  implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.8.0'

  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
  testImplementation 'org.testcontainers:postgresql:1.16.2'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation sourceSets.smokeTest.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  gatlingImplementation 'org.scala-lang:scala-library:2.13.7'
  gatlingImplementation 'com.warrenstrange:googleauth:1.5.0'

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pactVersionJava8
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pactVersionJava8

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  contractTestImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform

}

gatling {
  toolVersion '3.3.1'
  scalaVersion '2.12.10'
  simulations = { include "uk.gov.hmcts.reform.draftstore.CreateMultipleDrafts.scala" }
}

mainClassName = 'uk.gov.hmcts.reform.draftstore.DraftStoreApplication'

bootJar {
  archiveFileName = 'draft-store.jar'

  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
  systemProperty 'pact.provider.version', System.getProperty('pact.provider.version')
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
tasks.withType(Copy).all {
    duplicatesStrategy 'exclude'
}

runProviderPactVerification.dependsOn contract

runProviderPactVerification.finalizedBy pactVerify
